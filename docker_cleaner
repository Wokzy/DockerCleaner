#!/usr/bin/env python3
import subprocess as sb

f = open('docker_cleaner.log', 'w')
f.write('Beginning state: \n')

res = []

def log(data):
	f.write(data)

def subprocess_run(command):
	rs = sb.Popen(command, shell=True, stdout=sb.PIPE, stderr=sb.PIPE).communicate()
	if rs[1].decode('utf-8'):
		return rs[1].decode('utf-8')
	return rs[0].decode('utf-8')

def check_container_status(containter_id): # If container is UP
	rs = subprocess_run('docker ps').split('\n')[1::]
	for containter in rs:
		print(containter.split(' ')[0])
		if containter != '' and containter.split(' ')[0] == containter_id:
			return True
	return False

def remove_data(img_id):
	rs = subprocess_run(f'docker rmi {img_id}')
	if 'Deleted' not in rs:
		containter = rs.split(' ')[-1][:-1:]
		print(f'Image {img_id} is connected with {containter}.', end=' ')
		if check_container_status(containter):
			print(f'{containter} is working, image wont be deleted.')
		else:
			print(f'Deleting {containter} due to inactivity.')
			res.append('Deleted connected containter: ' + subprocess_run(f'docker rm {containter}'))
			remove_data(img_id)
	else:
		res.append(rs)

def docker_img_check(repo, tag, img_id):
	if repo == '<none>' and tag == '<none>':
		remove_data(img_id)
		return 1
	return 0

def volumes_cleaning():
	cntr = 0
	volumes = subprocess_run('docker volume ls -f dangling=true').split('\n')[1::]
	for volume_line in volumes:
		if volume_line:
			vol = volume_line.split(' ')[-1]
			rs = subprocess_run(f'docker volume rm {vol}')
			res.append(f'Removed volume: {vol}')

			cntr += 1

	return cntr

images = subprocess_run('docker images')
counter = 0
log(images)

for image in images.split('\n')[1::]:
	if len(image) > 1:
		data = list(filter(('').__ne__, image.split(' ')))
		if len(data) > 0:
			counter += docker_img_check(data[0], data[1], data[2])


if counter:
	print(f'successfully cleaned {counter} images')
	log('\n')
else:
	print('no images to clean')

vol_res = volumes_cleaning()
if vol_res:
	print(f'cleaned {vol_res} volume(s)')

for i in res:
	log(i)

images = subprocess_run('docker images')
log('\nFinal state: \n')
log(images)

f.close()
